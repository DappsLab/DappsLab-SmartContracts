   function bid(uint256 tokenId, uint256 tokenAmount) public payable {
        // No arguments are necessary, all
        // information is already part of
        // the transaction. The keyword payable
        // is required for the function to
        // be able to receive Ether.

        // Revert the call if the bidding
        // period is over.
        require(tokenAmount > 0);
        require(
            block.timestamp <= _auctionEndTime[tokenId],
            "Auction already ended."
        );

        // If the bid is not higher, send the
        // money back (the failing require
        // will revert all changes in this
        // function execution including
        // it having received the money).
        require(
            tokenAmount > _highestBid[tokenId],
            "There already is a higher bid."
        );
        require(_token.transfer(_owners[tokenId], tokenAmount)); //cut tokens from bidder
        if (_highestBid[tokenId] != 0) {
            // Sending back the money by simply using
            // highestBidder.send(highestBid) is a security risk
            // because it could execute an untrusted contract.
            // It is always safer to let the recipients
            // withdraw their money themselves.
            _pendingReturns[tokenId][_highestBidder[tokenId]] += _highestBid[tokenId];
        }
        _highestBidder[tokenId] = msg.sender;
        _highestBid[tokenId] = tokenAmount;
        emit HighestBidIncreased(tokenId, msg.sender, tokenAmount);

    }

    /// Withdraw a bid that was overbid.
    //error: transact to ERC721PresetMinterPauserAutoIdTest.withdraw pending ...
    function withdraw(uint256 tokenId) public virtual returns (bool) {
        uint amount = _pendingReturns[tokenId][msg.sender];
        if (amount > 0) {
            // It is important to set this to zero because the recipient
            // can call this function again as part of the receiving call
            // before `send` returns.
            _pendingReturns[tokenId][msg.sender] = 0;


            if (_token.spend(_owners[tokenId], _pendingReturns[tokenId][msg.sender])){//error: i think here is the error


            } else {
                // No need to call throw here, just reset the amount owing
                _pendingReturns[tokenId][msg.sender] = amount;
                return false;
            }
        }
        return true;
    }

    /// End the auction and send the highest bid
    /// to the beneficiary.
    function auctionEnd(uint256 tokenId) public {
        // It is a good guideline to structure functions that interact
        // with other contracts (i.e. they call functions or send Ether)
        // into three phases:
        // 1. checking conditions
        // 2. performing actions (potentially changing conditions)
        // 3. interacting with other contracts
        // If these phases are mixed up, the other contract could call
        // back into the current contract and modify the state or cause
        // effects (ether payout) to be performed multiple times.
        // If functions called internally include interaction with external
        // contracts, they also have to be considered interaction with
        // external contracts.

        // 1. Conditions
        require(block.timestamp >= _auctionEndTime[tokenId], "Auction not yet ended.");
        require(_started[tokenId], "auctionEnd has already been called.");

        // 2. Effects
        _started[tokenId] = false;
        emit AuctionEnded(tokenId, _highestBidder[tokenId], _highestBid[tokenId]);

        // 3. Interaction
        // require(_token.spend(_highestBidder[tokenId], _highestBid[tokenId])); //cut tokens from winner
        _transfer(_owners[tokenId], _highestBidder[tokenId] , tokenId); //send NFT to winner
    }